@page "/EditPost"
@using atbackend.Data
@using atbackend.Models
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject ApplicationDbContext dbContext
@inject NavigationManager _nav

<h3>EditPost</h3>



@if (post != null)
{
<Modal @ref="modalRef">
  <ModalContent Centered>
    <ModalHeader>
      <ModalTitle>Add Category</ModalTitle>
      <CloseButton />
    </ModalHeader>
    <ModalBody>
      <div class="cat-infos">
      <TextEdit @bind-Text="@catName"/>
      <ColorPicker Style="width: 50px" @bind-Color="@colorValue" ShowHueSlider/>
      </div>
      <MemoEdit @bind-Text="@catDescription"/>


      <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        <Button Color="Color.Primary" Clicked="@SubmitCategory">Save Changes</Button>
      </ModalFooter>
    </ModalBody>
  </ModalContent>
</Modal>


<Snackbar Color="SnackbarColor.Success" @ref="successBar">
  <SnackbarBody>
    Post <b>@title</b> successfully submitted
  </SnackbarBody>
</Snackbar>


<Snackbar Color="SnackbarColor.Danger" @ref="errorBar">
  <SnackbarBody>
    An error occurred while submitting post <b>@title</b>
  </SnackbarBody>
</Snackbar>

<Snackbar Color="SnackbarColor.Success" @ref="catSuccessBar">
  <SnackbarBody>
    Category <b>@catName</b> successfully created
  </SnackbarBody>
</Snackbar>


<Snackbar Color="SnackbarColor.Danger" @ref="catErrorBar">
  <SnackbarBody>
    An error occurred while creating category <b>@catName</b>
  </SnackbarBody>
</Snackbar>

<section>
<div class="content">

  <FieldLabel>Title</FieldLabel>
  <TextEdit @bind-Text="@title" Placeholder="Title" Disabled="isLoading"/>
  
  
  
  

  
  <div class="category-container">
  @if(categories == null)
  {
      <p>Categories is null</p>
  }
  else
  {
    <Select TValue="string" @bind-SelectedValue="@category">
      <SelectItem TValue="string" Value=@category>@category</SelectItem>
      @foreach (var cat in categories)
      {
        if (cat != null && cat.Name != category)
        {
          <SelectItem TValue="string" Value="@cat.Name">@cat.Name</SelectItem>
        }
      }
    </Select>
    
  }
  <Button Color="Color.Primary" Clicked="@ShowModal"><Icon Name="IconName.PlusCircle" /></Button>
  </div>

  <FieldLabel >Description</FieldLabel>
  <MemoEdit @bind-Text="@description" Rows="5" Disabled="isLoading"/>

  <Markdown Value="@content" ValueChanged="@OnMarkdownValueChanged"/>

  <div class="submit-container">
    <div class="submit-box">
      <Switch Style="margin: 10px" @bind-Checked="@published" TValue="bool">Published</Switch>
      <Button Color="Color.Primary" Clicked="@SubmitPost" Loading="@isLoading">Submit</Button>
    </div>
  </div>

</div>
</section>
} 

@if (post == null)
{
  <p>Error while loading the post</p>
}




@code {
  //TODO : Too much duplicate code between editpost and newpost, refactor.
  Guid postId;
  Post? post;
  string? title;
  string? description;
  string? category;
  bool published;
  string? markdownHtml;
  string content;
  private bool isLoading = false;
  string selectedCategory;
  string catName;
  string catDescription;
  string colorValue = "#ff0000";
  private Snackbar? successBar;
  private Snackbar? errorBar;
  private Snackbar? catSuccessBar;
  private Snackbar? catErrorBar;
  
  private List<Category> categories;
  
  private Modal modalRef;

  private Task ShowModal()
  {
    return modalRef.Show();
  }

  private Task HideModal()
  {
    return modalRef.Hide();
  }
  
  //TODO: Move the category modal to it's own component
  private async Task SubmitCategory()
  {
    isLoading = true;
    var category = new Category
    {
      Name = catName,
      Description = catDescription,
      Color = colorValue,
    };

    try
    {
      dbContext.Categories.Add(category);
      await dbContext.SaveChangesAsync();
      isLoading = false;
      await catSuccessBar.Show();
      catName = "";
      catDescription = "";
      colorValue = "#ff0000";
      categories = await GetCategories();
      await HideModal();
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      isLoading = false;
      await catErrorBar.Show();
    }
  }
  
  private async Task SubmitPost()
  {
    isLoading = true;
    post.Title = title;
    post.Category = category;
    post.Content = content;
    post.Published = published;
    post.Description = description;
    post.UpdatedAt = DateTime.UtcNow;

    try
    {
      dbContext.Posts.Update(post);
      await dbContext.SaveChangesAsync();
      isLoading = false;
      await successBar.Show();
      _nav.NavigateTo("/allposts");
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      isLoading = false;
      await errorBar.Show();
    }
  }
  
  protected override void OnInitialized()
  {
    markdownHtml = Markdig.Markdown.ToHtml(content ?? string.Empty);

    base.OnInitialized();
  }
  
  Task<List<Category>> GetCategories()
  {
    return dbContext.Categories.ToListAsync();
  }

  Task OnMarkdownValueChanged(string value)
  {
    content = value;

    markdownHtml = Markdig.Markdown.ToHtml(content ?? string.Empty);

    return Task.CompletedTask;
  }
  protected override async Task OnInitializedAsync()
  {
    categories = await GetCategories() ?? new List<Category>();
    var uri = _nav.ToAbsoluteUri(_nav.Uri);
    var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

    if (!string.IsNullOrEmpty(queryString["id"]))
    {
      if (Guid.TryParse(queryString["id"], out postId))
      {
        Console.WriteLine("Parsed GUID: " + postId);
      }
      else
      {
        Console.WriteLine("Invalid GUID format");
      }
    }
    else
    {
      Console.WriteLine("No id parameter found in the query string");
    }

    if (postId != Guid.Empty )
    {
     post = await dbContext.Posts.FindAsync(postId);
     Console.WriteLine("-----" + postId + "-----");
     Console.WriteLine(post.Title + "PPPPOOOOOSSSSTTT");

     title = post.Title ?? "";
     description = post.Description ?? "";
     category = post.Category;
     published = post.Published;
     content = post.Content ?? "";
    }
    else
    {
      Console.WriteLine("postId is empty or dbContext is null.");
    }
  }
}