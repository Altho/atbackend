@page "/newpost"
@using Markdig
@using atbackend.Data
@using atbackend.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext dbContext
@rendermode InteractiveServer



<PageTitle>Posts</PageTitle>

<Modal @ref="modalRef">
  <ModalContent Centered>
    <ModalHeader>
      <ModalTitle>Add Category</ModalTitle>
      <CloseButton />
    </ModalHeader>
    <ModalBody>
      <div class="cat-infos">
      <TextEdit @bind-Text="@catName"/>
      <ColorPicker Style="width: 50px" @bind-Color="@colorValue" ShowHueSlider/>
      </div>
      <MemoEdit @bind-Text="@catDescription"/>


      <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        <Button Color="Color.Primary" Clicked="@SubmitCategory">Save Changes</Button>
      </ModalFooter>
    </ModalBody>
  </ModalContent>
</Modal>


<Snackbar Color="SnackbarColor.Success" @ref="successBar">
  <SnackbarBody>
    Post <b>@title</b> successfully submitted
  </SnackbarBody>
</Snackbar>


<Snackbar Color="SnackbarColor.Danger" @ref="errorBar">
  <SnackbarBody>
    An error occurred while submitting post <b>@title</b>
  </SnackbarBody>
</Snackbar>

<Snackbar Color="SnackbarColor.Success" @ref="catSuccessBar">
  <SnackbarBody>
    Category <b>@catName</b> successfully created
  </SnackbarBody>
</Snackbar>


<Snackbar Color="SnackbarColor.Danger" @ref="catErrorBar">
  <SnackbarBody>
    An error occurred while creating category <b>@catName</b>
  </SnackbarBody>
</Snackbar>

<section>
<div class="content">

  <FieldLabel>Title</FieldLabel>
  <TextEdit @bind-Text="@title" Placeholder="Title" Disabled="isLoading"/>
  
  
  
  

  
  <div class="category-container">
  @if(categories == null)
  {
      <p>Categories is null</p>
  }
  else
  {
    <Select TValue="string" @bind-SelectedValue="@selectedCategory">
      <SelectItem TValue="string" Value="null">Select Category</SelectItem>
      @foreach (var category in categories)
      {
        if (category != null)
        {
          <SelectItem TValue="string" Value="@category.Name">@category.Name</SelectItem>
        }
      }
    </Select>
    
  }
  <Button Color="Color.Primary" Clicked="@ShowModal"><Icon Name="IconName.PlusCircle" /></Button>
  </div>

  <FieldLabel >Description</FieldLabel>
  <MemoEdit @bind-Text="@description" Rows="5" Disabled="isLoading"/>

  <Markdown Value="@markdownValue" ValueChanged="@OnMarkdownValueChanged"/>

  <div class="submit-container">
    <div class="submit-box">
      <Switch Style="margin: 10px" @bind-Checked="@published" TValue="bool">Published</Switch>
      <Button Color="Color.Primary" Clicked="@SubmitPost" Loading="@isLoading">Submit</Button>
    </div>
  </div>

</div>
</section>




@code{
  private bool isLoading = false;
  string? markdownValue = "";
  string? markdownHtml;
  string? title = "";
  string? description = "";
  bool published;
  string selectedCategory;
  string catName;
  string catDescription;
  string colorValue = "#ff0000";

  private Snackbar? successBar;
  private Snackbar? errorBar;
  private Snackbar? catSuccessBar;
  private Snackbar? catErrorBar;
  
  private List<Category> categories;

  protected override void OnInitialized()
  {
    markdownHtml = Markdig.Markdown.ToHtml(markdownValue ?? string.Empty);

    base.OnInitialized();
  }
  
  Task<List<Category>> GetCategories()
  {
    return dbContext.Categories.ToListAsync();
  }

  Task OnMarkdownValueChanged(string value)
  {
    markdownValue = value;

    markdownHtml = Markdig.Markdown.ToHtml(markdownValue ?? string.Empty);

    return Task.CompletedTask;
  }
  
  protected override async Task OnInitializedAsync()
  {
    categories = await GetCategories() ?? new List<Category>();
    
  }

  private async Task SubmitPost()
  {
    isLoading = true;
    var post = new Post
    {
      Title = title,
      Description = description,
      Published = published,
      Content = markdownValue,
      Category = selectedCategory
    };

    try
    {
      dbContext.Posts.Add(post);
      await dbContext.SaveChangesAsync();
      isLoading = false;
      await successBar.Show();
      title = "";
      description = "";
      published = false;
      markdownValue = "";
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      isLoading = false;
      await errorBar.Show();
    }
  }
  
  private Modal modalRef;

  private Task ShowModal()
  {
    return modalRef.Show();
  }

  private Task HideModal()
  {
    return modalRef.Hide();
  }
  

  
  private async Task SubmitCategory()
  {
    isLoading = true;
    var category = new Category
    {
      Name = catName,
      Description = catDescription,
      Color = colorValue,
    };

    try
    {
      dbContext.Categories.Add(category);
      await dbContext.SaveChangesAsync();
      isLoading = false;
      await catSuccessBar.Show();
      catName = "";
      catDescription = "";
      colorValue = "#ff0000";
      categories = await GetCategories();
      await HideModal();
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      isLoading = false;
      await catErrorBar.Show();
    }
  }


}